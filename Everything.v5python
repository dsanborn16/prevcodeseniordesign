{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\n# AI Classification Competition Element IDs\nclass GameElements:\n    MOBILE_GOAL = 0\n    RED_RING = 1\n    BLUE_RING = 2\nleft_motor_a = Motor(Ports.PORT3, GearSetting.RATIO_18_1, True)\nleft_motor_b = Motor(Ports.PORT4, GearSetting.RATIO_18_1, True)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT11, GearSetting.RATIO_18_1, False)\nright_motor_b = Motor(Ports.PORT12, GearSetting.RATIO_18_1, False)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain_inertial = Inertial(Ports.PORT10)\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, drivetrain_inertial, 299.24, 320, 40, MM, 1)\nElevator_motor_a = Motor(Ports.PORT16, GearSetting.RATIO_18_1, False)\nElevator_motor_b = Motor(Ports.PORT18, GearSetting.RATIO_18_1, False)\nElevator = MotorGroup(Elevator_motor_a, Elevator_motor_b)\ncontroller_1 = Controller(PRIMARY)\ndigital_out_a = DigitalOut(brain.three_wire_port.b)\n# AI Vision Color Descriptions\n# AI Vision Code Descriptions\nai_vision_12 = AiVision(Ports.PORT20, AiVision.ALL_AIOBJS)\ndistance_2 = Distance(Ports.PORT19)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\nvexcode_initial_drivetrain_calibration_completed = False\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    global vexcode_initial_drivetrain_calibration_completed\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    drivetrain_inertial.calibrate()\n    while drivetrain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    vexcode_initial_drivetrain_calibration_completed = True\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n\n# Calibrate the Drivetrain\ncalibrate_drivetrain()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n\n\n# define variables used for controlling motors based on controller inputs\ncontroller_1_right_shoulder_control_motors_stopped = True\ndrivetrain_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_needs_to_be_stopped_controller_1, controller_1_right_shoulder_control_motors_stopped, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            # stop the motors if the brain is calibrating\n            if drivetrain_inertial.is_calibrating():\n                left_drive_smart.stop()\n                right_drive_smart.stop()\n                while drivetrain_inertial.is_calibrating():\n                    sleep(25, MSEC)\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3 + axis4\n            # right = axis3 - axis4\n            drivetrain_left_side_speed = controller_1.axis3.position() + controller_1.axis4.position()\n            drivetrain_right_side_speed = controller_1.axis3.position() - controller_1.axis4.position()\n            \n            # check if the values are inside of the deadband range\n            if abs(drivetrain_left_side_speed) < 5 and abs(drivetrain_right_side_speed) < 5:\n                # check if the motors have already been stopped\n                if drivetrain_needs_to_be_stopped_controller_1:\n                    # stop the drive motors\n                    left_drive_smart.stop()\n                    right_drive_smart.stop()\n                    # tell the code that the motors have been stopped\n                    drivetrain_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the motors next\n                # time the input is in the deadband range\n                drivetrain_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n            # check the buttonR1/buttonR2 status\n            # to control Elevator\n            if controller_1.buttonR1.pressing():\n                Elevator.spin(FORWARD)\n                controller_1_right_shoulder_control_motors_stopped = False\n            elif controller_1.buttonR2.pressing():\n                Elevator.spin(REVERSE)\n                controller_1_right_shoulder_control_motors_stopped = False\n            elif not controller_1_right_shoulder_control_motors_stopped:\n                Elevator.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_1_right_shoulder_control_motors_stopped = True\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n\n\n# Robot configuration code\n\n\n\ndef when_started1():\n    global myVariable\n    drivetrain_inertial.set_heading(0,DEGREES)\n    Elevator.set_velocity(100, PERCENT)\n    drivetrain.set_drive_velocity(90, PERCENT)\n    drivetrain.set_turn_velocity(70, PERCENT)\n    digital_out_a.set(False);\n    wait(1, SECONDS)\n    \n\n    if drivetrain.velocity(PERCENT > 80): \n        hardcode()\n\n    else:\n        reverseBelt()\n\nwhen_started1()\n\ndef giveAir():\n    digital_out_a.set(True)\n    wait(1, SECONDS)\n\n\ndef releaseAir():\n    digital_out_a.set(False)\n    wait(1, SECONDS)\n\n\nwhile True:\n    if controller_1.buttonB.pressing():\n        giveAir()\n    elif controller_1.buttonA.pressing():\n        releaseAir()\n\n\n\nmyVariable = 0\nmessage1 = Event()\n\ncount = 0\n\n#intake 16\n#chain 18\n\n\ndef hardcode():\n    global myVariable, message1 \n    Elevator.set_velocity(100, PERCENT)\n    drivetrain.set_drive_velocity(200, PERCENT)\n    drivetrain.drive_for(REVERSE, 35, INCHES)\n    drivetrain.stop()\n    digital_out_a.set(True)\n    wait(3, SECONDS)\n    drivetrain.drive_for(FORWARD, 19, INCHES)\n    drivetrain.turn_for(RIGHT, 132, DEGREES)\n    drivetrain.stop()\n    Elevator.spin(FORWARD)\n  \n\n    drivetrain.drive_for(FORWARD, 13, INCHES) #1st Pickup\n    trackRing()\n    drivetrain.stop()\n    wait(3, SECONDS)\n\n    drivetrain.drive_for(FORWARD, 5, INCHES) #2nd Pickup?\n    trackRing()\n    drivetrain.stop()\n    wait(3, SECONDS)\n\n    drivetrain.turn_for(LEFT, 193, DEGREES)\n    drivetrain.drive_for(FORWARD, 28, INCHES)\n    trackRing()\n    drivetrain.stop()\n    wait(3, SECONDS)\n\n    drivetrain.drive_for(FORWARD, 5, INCHES)\n    trackRing()\n    drivetrain.stop()\n    wait(3, SECONDS)\n\n    drivetrain.drive_for(FORWARD, 15, INCHES)\n    trackRing()\n    drivetrain.stop()\n    wait(3, SECONDS)\n\n    #Call the Corner Function\n    drivetrain.stop()\n\n\n\ndef reverseBelt():\n    Elevator.spin(REVERSE)\n    wait(1, SECONDS)\n    Elevator.spin(FORWARD)\n   \n\n\ndef ringsCollected():\n\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n    brain.screen.print(\"Found Object?:\", distance_2.is_object_detected())\n    brain.screen.next_row()\n    \n    if distance_2.is_object_detected():\n        if distance_2.object_distance(INCHES < 8):\n            count = count + 1\n            brain.screen.print(count)\n\n\nvexcode_ai_vision_12_objects = []\nvexcode_ai_vision_12_object_index = 0\n#myVariable = 0\n\ndef trackRing():\n    global myVariable, vexcode_ai_vision_12_objects, vexcode_ai_vision_12_object_index\n    while True:\n        vexcode_ai_vision_12_objects = ai_vision_12.take_snapshot(AiVision.ALL_AIOBJS)\n        if vexcode_ai_vision_12_objects[vexcode_ai_vision_12_object_index].id == GameElements.RED_RING:\n            if vexcode_ai_vision_12_objects[vexcode_ai_vision_12_object_index].centerX > 200:\n                drivetrain.turn_for(RIGHT, 1, DEGREES)\n            if vexcode_ai_vision_12_objects[vexcode_ai_vision_12_object_index].centerX < 120:\n                drivetrain.turn_for(LEFT, 1, DEGREES)\n            if vexcode_ai_vision_12_objects[vexcode_ai_vision_12_object_index].centerX > 120 and vexcode_ai_vision_12_objects[vexcode_ai_vision_12_object_index].centerX < 200:\n                if vexcode_ai_vision_12_objects[vexcode_ai_vision_12_object_index].centerY > 230:\n                    drivetrain.set_drive_velocity(85, PERCENT)\n                    drivetrain.drive_for(FORWARD, 6, INCHES)\n                    break\n                drivetrain.drive(FORWARD)\n        else:\n            drivetrain.turn(RIGHT)\n        wait(5, MSEC)\n\n\ndef seekCorner():\n    drivetrain_inertial.set_rotation(90, DEGREES)\n    drivetrain.drive_for(REVERSE, 20, INCHES)\n    digital_out_a.set(False)\n    wait(1, SECONDS)","textLanguage":"python","robotConfig":[{"port":[3,4,11,12,10],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel325in","gear":"ratio18_1","gearRatio":"1:1","direction":"rev","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[16,18],"name":"Elevator","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"Elevator","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"arcadel","id":"primary"},"triportSourcePort":22},{"port":[2],"name":"digital_out_a","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[20],"name":"ai_vision_12","customName":true,"deviceType":"AIVision","deviceClass":"aivision","setting":{"config":"{\"colors\":[],\"codes\":[],\"tags\":false,\"AIObjects\":true,\"AIObjectModel\":[\"Ball(Blue)\",\"Ball(Green)\",\"Ball(Red)\",\"Ring(Blue)\",\"Ring(Green)\",\"Ring(Red)\",\"Cube(Blue)\",\"Cube(Green)\",\"Cube(Red)\"],\"aiModelDropDownValue\":\"2024-2025 High Stakes\"}","isConfigured":"false"},"triportSourcePort":22},{"port":[19],"name":"distance_2","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{"id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}