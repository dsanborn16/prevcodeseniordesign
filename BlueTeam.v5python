{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nleft_motor_a = Motor(Ports.PORT3, GearSetting.RATIO_18_1, True)\nleft_motor_b = Motor(Ports.PORT5, GearSetting.RATIO_18_1, True)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT12, GearSetting.RATIO_18_1, False)\nright_motor_b = Motor(Ports.PORT11, GearSetting.RATIO_18_1, False)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain_inertial = Inertial(Ports.PORT10)\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, drivetrain_inertial, 319.19, 320, 40, MM, 1)\ndistance_19 = Distance(Ports.PORT19)\nmotor_17 = Motor(Ports.PORT17, GearSetting.RATIO_18_1, False)\nmotor_18 = Motor(Ports.PORT18, GearSetting.RATIO_18_1, False)\ndigital_out_b = DigitalOut(brain.three_wire_port.b)\n# AI Vision Color Descriptions\nai_vision_20__RED_5 = Colordesc(2, 239, 56, 99, 10, 0.2)\n# AI Vision Code Descriptions\nai_vision_20 = AiVision(Ports.PORT20, ai_vision_20__RED_5)\n# vex-vision-config:begin\nvision_7__RED5 = Signature(1, 12839, 13927, 13383,-1305, -763, -1034,2.5, 0)\nvision_7__BLUE5 = Signature(2, -4097, -3363, -3730,8971, 12073, 10522,2.5, 0)\nvision_7 = Vision(Ports.PORT7, 50, vision_7__RED5, vision_7__BLUE5)\n# vex-vision-config:end\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\nvexcode_initial_drivetrain_calibration_completed = False\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    global vexcode_initial_drivetrain_calibration_completed\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    drivetrain_inertial.calibrate()\n    while drivetrain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    vexcode_initial_drivetrain_calibration_completed = True\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n\n# Calibrate the Drivetrain\ncalibrate_drivetrain()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n\n\n# define variables used for controlling motors based on controller inputs\ncontroller_1_left_shoulder_control_motors_stopped = True\ncontroller_1_right_shoulder_control_motors_stopped = True\ndrivetrain_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_needs_to_be_stopped_controller_1, controller_1_left_shoulder_control_motors_stopped, controller_1_right_shoulder_control_motors_stopped, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            # stop the motors if the brain is calibrating\n            if drivetrain_inertial.is_calibrating():\n                left_drive_smart.stop()\n                right_drive_smart.stop()\n                while drivetrain_inertial.is_calibrating():\n                    sleep(25, MSEC)\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3 + axis4\n            # right = axis3 - axis4\n            drivetrain_left_side_speed = controller_1.axis3.position() + controller_1.axis4.position()\n            drivetrain_right_side_speed = controller_1.axis3.position() - controller_1.axis4.position()\n            \n            # check if the values are inside of the deadband range\n            if abs(drivetrain_left_side_speed) < 5 and abs(drivetrain_right_side_speed) < 5:\n                # check if the motors have already been stopped\n                if drivetrain_needs_to_be_stopped_controller_1:\n                    # stop the drive motors\n                    left_drive_smart.stop()\n                    right_drive_smart.stop()\n                    # tell the code that the motors have been stopped\n                    drivetrain_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the motors next\n                # time the input is in the deadband range\n                drivetrain_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n            # check the buttonL1/buttonL2 status\n            # to control motor_17\n            if controller_1.buttonL1.pressing():\n                motor_17.spin(FORWARD)\n                controller_1_left_shoulder_control_motors_stopped = False\n            elif controller_1.buttonL2.pressing():\n                motor_17.spin(REVERSE)\n                controller_1_left_shoulder_control_motors_stopped = False\n            elif not controller_1_left_shoulder_control_motors_stopped:\n                motor_17.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_1_left_shoulder_control_motors_stopped = True\n            # check the buttonR1/buttonR2 status\n            # to control motor_18\n            if controller_1.buttonR1.pressing():\n                motor_18.spin(FORWARD)\n                controller_1_right_shoulder_control_motors_stopped = False\n            elif controller_1.buttonR2.pressing():\n                motor_18.spin(REVERSE)\n                controller_1_right_shoulder_control_motors_stopped = False\n            elif not controller_1_right_shoulder_control_motors_stopped:\n                motor_18.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_1_right_shoulder_control_motors_stopped = True\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n\n#endregion VEXcode Generated Robot Configuration\n\nvexcode_vision_7_objects = []\nvexcode_brain_precision = 0\nvexcode_console_precision = 0\nvexcode_controller_1_precision = 0\nmessage1 = Event()\ncheckPeg = Event()\ntrackRings = Event()\nreverseBelt = Event()\ncheckJam = Event()\nringCount = Event()\nfindCorner = Event()\ncornerTracking = Event()\nmyVariable = 0\ncount = 0\ninertialSeek = 0\njamCount = 0\nblueCount = 0\nffffffffff = False\nRunning = False\n\ndef onauton_autonomous_0():\n    global message1, checkPeg, trackRings, reverseBelt, checkJam, ringCount, findCorner, cornerTracking, myVariable, count, inertialSeek, jamCount, blueCount, ffffffffff, Running, vexcode_vision_7_objects, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    wait(0.5, SECONDS)\n    drivetrain.set_drive_velocity(100, PERCENT)\n    drivetrain.set_turn_velocity(100, PERCENT)\n    drivetrain.set_heading(0, DEGREES)\n    digital_out_b.set(False)\n    drivetrain.drive_for(REVERSE, 129, INCHES)\n    drivetrain.stop()\n    digital_out_b.set(True)\n    wait(2, SECONDS)\n    drivetrain.stop()\n    drivetrain.turn_for(LEFT, 33.5, DEGREES)\n    motor_18.set_velocity(100, PERCENT)\n    motor_17.set_velocity(100, PERCENT)\n    motor_18.spin(FORWARD)\n    motor_17.spin(FORWARD)\n    wait(1, SECONDS)\n    drivetrain.drive_for(FORWARD, 48, INCHES)\n    drivetrain.stop()\n    wait(1, SECONDS)\n    drivetrain.drive_for(FORWARD, 48, INCHES)\n    drivetrain.stop()\n    wait(6, SECONDS)\n    drivetrain.turn_to_heading(92, DEGREES)\n    drivetrain.drive_for(FORWARD, 92, INCHES)\n    motor_17.stop()\n    motor_18.stop()\n\ndef onauton_autonomous_1():\n    global message1, checkPeg, trackRings, reverseBelt, checkJam, ringCount, findCorner, cornerTracking, myVariable, count, inertialSeek, jamCount, blueCount, ffffffffff, Running, vexcode_vision_7_objects, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    wait(8, SECONDS)\n    jamCount = 0\n    while jamCount < 500:\n        if motor_18.velocity(PERCENT) < 73.2:\n            motor_18.spin(REVERSE)\n            wait(1, SECONDS)\n            motor_18.stop()\n            wait(0.5, SECONDS)\n            motor_18.spin(FORWARD)\n            wait(1, SECONDS)\n        wait(5, MSEC)\n\ndef onauton_autonomous_2():\n    global message1, checkPeg, trackRings, reverseBelt, checkJam, ringCount, findCorner, cornerTracking, myVariable, count, inertialSeek, jamCount, blueCount, ffffffffff, Running, vexcode_vision_7_objects, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    blueCount = 0\n    while blueCount < 50:\n        vexcode_vision_7_objects = vision_7.take_snapshot(vision_7__RED5)\n        if vexcode_vision_7_objects and len(vexcode_vision_7_objects) > 0:\n            wait(0.27, SECONDS)\n            motor_18.spin(REVERSE)\n            motor_17.spin(REVERSE)\n            wait(0.125, SECONDS)\n            motor_17.stop()\n            motor_18.stop()\n            wait(0.125, SECONDS)\n            motor_17.spin(FORWARD)\n            motor_18.spin(FORWARD)\n            blueCount = blueCount + 1\n            motor_18.set_velocity(100, PERCENT)\n        wait(5, MSEC)\n\ndef ondriver_drivercontrol_0():\n    global message1, checkPeg, trackRings, reverseBelt, checkJam, ringCount, findCorner, cornerTracking, myVariable, count, inertialSeek, jamCount, blueCount, ffffffffff, Running, vexcode_vision_7_objects, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    drivetrain.set_heading(0, DEGREES)\n    motor_17.set_velocity(100, PERCENT)\n    motor_18.set_velocity(100, PERCENT)\n    drivetrain.set_drive_velocity(100, PERCENT)\n    drivetrain.set_turn_velocity(70, PERCENT)\n    while True:\n        if controller_1.buttonB.pressing():\n            digital_out_b.set(True)\n            wait(1, SECONDS)\n        elif controller_1.buttonA.pressing():\n            digital_out_b.set(False)\n        else:\n            brain.screen.set_cursor(1, 1)\n            brain.screen.print(\"No Button Pressed\")\n        wait(5, MSEC)\n\n# create a function for handling the starting and stopping of all autonomous tasks\ndef vexcode_auton_function():\n    # Start the autonomous control tasks\n    auton_task_0 = Thread( onauton_autonomous_0 )\n    auton_task_1 = Thread( onauton_autonomous_1 )\n    auton_task_2 = Thread( onauton_autonomous_2 )\n    # wait for the driver control period to end\n    while( competition.is_autonomous() and competition.is_enabled() ):\n        # wait 10 milliseconds before checking again\n        wait( 10, MSEC )\n    # Stop the autonomous control tasks\n    auton_task_0.stop()\n    auton_task_1.stop()\n    auton_task_2.stop()\n\ndef vexcode_driver_function():\n    # Start the driver control tasks\n    driver_control_task_0 = Thread( ondriver_drivercontrol_0 )\n\n    # wait for the driver control period to end\n    while( competition.is_driver_control() and competition.is_enabled() ):\n        # wait 10 milliseconds before checking again\n        wait( 10, MSEC )\n    # Stop the driver control tasks\n    driver_control_task_0.stop()\n\n\n# register the competition functions\ncompetition = Competition( vexcode_driver_function, vexcode_auton_function )\n","textLanguage":"python","robotConfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"motor_17","leftDir":"false","right":"motor_18","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"arcadel","id":"primary"},"triportSourcePort":22},{"port":[3,5,12,11,10],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"rev","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[19],"name":"distance_19","customName":false,"deviceType":"Distance","deviceClass":"distance","setting":{"id":"partner"},"triportSourcePort":22},{"port":[17],"name":"motor_17","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[18],"name":"motor_18","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[2],"name":"digital_out_b","customName":false,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[20],"name":"ai_vision_20","customName":false,"deviceType":"AIVision","deviceClass":"aivision","setting":{"config":"{\"colors\":[{\"id\":2,\"name\":\"RED_5\",\"nameValid\":\"Valid\",\"lastValidName\":\"RED_5\",\"red\":239.3757792207792,\"green\":55.59185064935065,\"blue\":99.43558441558442,\"hueRange\":10,\"saturationRange\":0.2}],\"codes\":[],\"tags\":false,\"AIObjects\":false,\"AIObjectModel\":[\"Ball(Blue)\",\"Ball(Green)\",\"Ball(Red)\",\"Ring(Blue)\",\"Ring(Green)\",\"Ring(Red)\",\"Cube(Blue)\",\"Cube(Green)\",\"Cube(Red)\"],\"AIModelMetadata\":{\"id\":0,\"version\":1,\"name\":\"Classroom Objects\"},\"aiModelDropDownValue\":\"Classroom Objects\"}","isConfigured":"false"},"triportSourcePort":22},{"port":[7],"name":"vision_7","customName":false,"deviceType":"Vision","deviceClass":"vision","setting":{"config":"{\"config\":{\"brightness\":50,\"signatures\":[{\"name\":\"RED5\",\"parameters\":{\"uMin\":12839,\"uMax\":13927,\"uMean\":13383,\"vMin\":-1305,\"vMax\":-763,\"vMean\":-1034,\"rgb\":7480864,\"type\":0,\"name\":\"RED5\"},\"range\":2.5},{\"name\":\"BLUE5\",\"parameters\":{\"uMin\":-4097,\"uMax\":-3363,\"uMean\":-3730,\"vMin\":8971,\"vMax\":12073,\"vMean\":10522,\"rgb\":2045040,\"type\":0,\"name\":\"BLUE5\"},\"range\":2.5},{\"name\":\"SIG_3\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_3\"},\"range\":2.5},{\"name\":\"SIG_4\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_4\"},\"range\":2.5},{\"name\":\"SIG_5\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_5\"},\"range\":2.5},{\"name\":\"SIG_6\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_6\"},\"range\":2.5},{\"name\":\"SIG_7\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_7\"},\"range\":2.5}],\"codes\":[]}}","isConfigured":"false"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.3","minVersion":"3.1.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}