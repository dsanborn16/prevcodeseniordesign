{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\n# AI Classification Competition Element IDs\nclass GameElements:\n    MOBILE_GOAL = 0\n    RED_RING = 1\n    BLUE_RING = 2\nleft_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nleft_motor_b = Motor(Ports.PORT2, GearSetting.RATIO_18_1, False)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT3, GearSetting.RATIO_18_1, True)\nright_motor_b = Motor(Ports.PORT4, GearSetting.RATIO_18_1, True)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain_inertial = Inertial(Ports.PORT12)\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, drivetrain_inertial, 319.19, 320, 40, MM, 1)\nmotor_7 = Motor(Ports.PORT7, GearSetting.RATIO_6_1, True)\nmotor_6 = Motor(Ports.PORT6, GearSetting.RATIO_6_1, True)\npotentiometerV2_a = PotentiometerV2(brain.three_wire_port.a)\n# AI Vision Color Descriptions\nai_vision_20__Red = Colordesc(1, 235, 12, 53, 10, 0.1)\nai_vision_20__Blue = Colordesc(2, 29, 135, 211, 11, 0.1)\n# AI Vision Code Descriptions\nai_vision_20 = AiVision(Ports.PORT20, ai_vision_20__Red, ai_vision_20__Blue, AiVision.ALL_AIOBJS)\nmotor_10 = Motor(Ports.PORT10, GearSetting.RATIO_36_1, False)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\nvexcode_initial_drivetrain_calibration_completed = False\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    global vexcode_initial_drivetrain_calibration_completed\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    drivetrain_inertial.calibrate()\n    while drivetrain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    vexcode_initial_drivetrain_calibration_completed = True\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n\n# Calibrate the Drivetrain\ncalibrate_drivetrain()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\ndef conveyor():\n    while(1):\n        angle = potentiometerV2_a.angle(DEGREES)\n        wait(50,MSEC)\n        if (abs(potentiometerV2_a.angle(DEGREES)-angle) <= 3):\n            stoppedMoving = True\n        else:\n            stoppedMoving = False\n        if stoppedMoving :\n            motor_6.spin(FORWARD,50,PERCENT)\n            wait(500,MSEC)\n            motor_6.spin(REVERSE,50,PERCENT)\n            wait(100,MSEC)\n    \n    \nwhile(1):\n    # drivetrain.turn_to_heading(90, DEGREES, 100, PERCENT, True)\n    # wait(500,MSEC)\n    # drivetrain.drive_for(FORWARD, 6, INCHES, 40, PERCENT, True)\n    # wait(500,MSEC)\n    # drivetrain.turn_to_heading(180, DEGREES, 100, PERCENT, True)\n    # wait(500,MSEC)\n    # drivetrain.drive_for(FORWARD, 6, INCHES, 40, PERCENT, True)\n    # wait(500,MSEC)\n    # drivetrain.turn_to_heading(-90, DEGREES, 100, PERCENT, True)\n    # wait(500,MSEC)\n    # drivetrain.drive_for(FORWARD, 6, INCHES, 40, PERCENT, True)\n    # wait(500,MSEC)\n    # drivetrain.turn_to_heading(0, DEGREES, 100, PERCENT, True)\n    # wait(500,MSEC)\n    # drivetrain.drive_for(FORWARD, 6, INCHES, 40, PERCENT, True)\n    # RedObject = ai_vision_20.take_snapshot(AiObjdesc(1))\n    # BlueObject = ai_vision_20.take_snapshot(AiObjdesc(2))\n    # if RedObject[0].exists:\n    #     brain.screen.print(\"Red\")\n    # elif BlueObject[0].exists:\n    #     brain.screen.print(\"Blue\")\n    # else:\n    #     brain.screen.print(\"None\")\n    # wait(500,MSEC)\n    # brain.screen.clear_screen()\n    # brain.screen.set_cursor(1,1)\n    drivetrain.drive_for(REVERSE,26,INCHES,40,PERCENT)\n    wait(250,MSEC)\n    motor_10.spin(REVERSE)\n    wait(250,MSEC)\n    motor_7.spin(FORWARD,50,PERCENT)\n    motor_6.spin(REVERSE,50,PERCENT)\n    conveyor = Thread(conveyor)\n    wait(500,MSEC)\n    drivetrain.turn_to_heading(-95,DEGREES)\n    wait(250,MSEC)\n    drivetrain.drive_for(FORWARD,7,INCHES,80,PERCENT)\n    wait(250,MSEC)\n    drivetrain.turn_to_heading(-140,DEGREES)\n    drivetrain.drive_for(FORWARD,5,INCHES,100,PERCENT)\n    wait(250,MSEC)\n    drivetrain.drive_for(REVERSE,3,INCHES,100,PERCENT)\n    wait(250,MSEC)\n    drivetrain.drive_for(FORWARD,5,INCHES,100,PERCENT)\n    wait(250,MSEC)\n    drivetrain.drive_for(REVERSE,3,INCHES,100,PERCENT)\n    wait(250,MSEC)\n    drivetrain.drive_for(FORWARD,5,INCHES,100,PERCENT)\n    wait(250,MSEC)\n    \n\n    \n    \n\n\n\n\n\n\n\n\n","textLanguage":"python","robotConfig":[{"port":[1,2,3,4,12],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[7],"name":"motor_7","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[6],"name":"motor_6","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[1],"name":"potentiometerV2_a","customName":false,"deviceType":"PotentiometerV2","deviceClass":"potV2","setting":{},"triportSourcePort":22},{"port":[20],"name":"ai_vision_20","customName":false,"deviceType":"AIVision","deviceClass":"aivision","setting":{"config":"{\"colors\":[{\"id\":1,\"name\":\"Red\",\"nameValid\":\"Valid\",\"lastValidName\":\"Red\",\"red\":234.8762447257384,\"green\":12.202573839662447,\"blue\":52.73691983122363,\"hueRange\":10,\"saturationRange\":0.1},{\"id\":2,\"name\":\"Blue\",\"nameValid\":\"Valid\",\"lastValidName\":\"Blue\",\"red\":29.09607425253274,\"green\":135.11184210526315,\"blue\":210.86400420064246,\"hueRange\":11,\"saturationRange\":0.1}],\"codes\":[],\"tags\":false,\"AIObjects\":true,\"AIObjectModel\":[\"Ball(Blue)\",\"Ball(Green)\",\"Ball(Red)\",\"Ring(Blue)\",\"Ring(Green)\",\"Ring(Red)\",\"Cube(Blue)\",\"Cube(Green)\",\"Cube(Red)\"],\"AIModelMetadata\":{\"id\":16,\"version\":1,\"name\":\"2024-2025 High Stakes\"},\"aiModelDropDownValue\":\"2024-2025 High Stakes\"}","isConfigured":"false"},"triportSourcePort":22},{"port":[10],"name":"motor_10","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"}}],"slot":3,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.5","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}