{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\n# AI Classification Competition Element IDs\nclass GameElements:\n    MOBILE_GOAL = 0\n    RED_RING = 1\n    BLUE_RING = 2\nmotor_8 = Motor(Ports.PORT8, GearSetting.RATIO_18_1, False)\ncontroller_1 = Controller(PRIMARY)\nleft_drive_smart = Motor(Ports.PORT9, GearSetting.RATIO_36_1, False)\nright_drive_smart = Motor(Ports.PORT10, GearSetting.RATIO_36_1, True)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 319.19, 295, 40, MM, 1)\nmotor_6 = Motor(Ports.PORT6, GearSetting.RATIO_6_1, False)\nmotor_group_4_motor_a = Motor(Ports.PORT4, GearSetting.RATIO_36_1, True)\nmotor_group_4_motor_b = Motor(Ports.PORT5, GearSetting.RATIO_36_1, False)\nmotor_group_4 = MotorGroup(motor_group_4_motor_a, motor_group_4_motor_b)\n# vex-vision-config:begin\nvision_11__STAKE = Signature(1, -1639, -1093, -1366,-5395, -4809, -5102,3.5, 0)\nvision_11 = Vision(Ports.PORT11, 20, vision_11__STAKE)\n# vex-vision-config:end\n# AI Vision Color Descriptions\n# AI Vision Code Descriptions\nai_vision_12 = AiVision(Ports.PORT12, AiVision.ALL_AIOBJS)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n\n\n# define variables used for controlling motors based on controller inputs\ncontroller_1_x_b_buttons_control_motors_stopped = True\ndrivetrain_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_needs_to_be_stopped_controller_1, controller_1_x_b_buttons_control_motors_stopped, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3 + axis4\n            # right = axis3 - axis4\n            drivetrain_left_side_speed = controller_1.axis3.position() + controller_1.axis4.position()\n            drivetrain_right_side_speed = controller_1.axis3.position() - controller_1.axis4.position()\n            \n            # check if the values are inside of the deadband range\n            if abs(drivetrain_left_side_speed) < 5 and abs(drivetrain_right_side_speed) < 5:\n                # check if the motors have already been stopped\n                if drivetrain_needs_to_be_stopped_controller_1:\n                    # stop the drive motors\n                    left_drive_smart.stop()\n                    right_drive_smart.stop()\n                    # tell the code that the motors have been stopped\n                    drivetrain_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the motors next\n                # time the input is in the deadband range\n                drivetrain_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n            # check the buttonX/buttonB status\n            # to control motor_8\n            if controller_1.buttonX.pressing():\n                motor_8.spin(FORWARD)\n                controller_1_x_b_buttons_control_motors_stopped = False\n            elif controller_1.buttonB.pressing():\n                motor_8.spin(REVERSE)\n                controller_1_x_b_buttons_control_motors_stopped = False\n            elif not controller_1_x_b_buttons_control_motors_stopped:\n                motor_8.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_1_x_b_buttons_control_motors_stopped = True\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n\n#endregion VEXcode Generated Robot Configuration\n\nvexcode_ai_vision_12_objects = []\nvexcode_brain_precision = 0\nvexcode_console_precision = 0\nvexcode_controller_1_precision = 0\nvexcode_ai_vision_12_object_index = 0\nmyVariable = 0\nmessage1 = Event()\ncheckPeg = Event()\ntrackRings = Event()\n\ndef when_started1():\n    global myVariable, message1, checkPeg, trackRings, vexcode_ai_vision_12_objects, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision, vexcode_ai_vision_12_object_index\n    while True:\n        trackRings.broadcast()\n        wait(5, MSEC)\n\ndef onevent_trackRings_0():\n    global myVariable, message1, checkPeg, trackRings, vexcode_ai_vision_12_objects, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision, vexcode_ai_vision_12_object_index\n    while True:\n        brain.screen.clear_screen()\n        brain.screen.set_cursor(1, 1)\n        vexcode_ai_vision_12_objects = ai_vision_12.take_snapshot(AiVision.ALL_AIOBJS)\n        if vexcode_ai_vision_12_objects and len(vexcode_ai_vision_12_objects) > 0:\n            if vexcode_ai_vision_12_objects[vexcode_ai_vision_12_object_index].id == GameElements.RED_RING:\n                brain.screen.print(\"RedRing found\")\n                if vexcode_ai_vision_12_objects[vexcode_ai_vision_12_object_index].centerX > 280:\n                    drivetrain.turn_for(RIGHT, 1, DEGREES)\n                if vexcode_ai_vision_12_objects[vexcode_ai_vision_12_object_index].centerX < 170:\n                    drivetrain.turn_for(LEFT, 1, DEGREES)\n                if vexcode_ai_vision_12_objects[vexcode_ai_vision_12_object_index].centerX > 170 and vexcode_ai_vision_12_objects[vexcode_ai_vision_12_object_index].centerX < 280:\n                    if vexcode_ai_vision_12_objects[vexcode_ai_vision_12_object_index].width < 230:\n                        drivetrain.drive(FORWARD)\n                    else:\n                        drivetrain.stop()\n        else:\n            brain.screen.print(\"No Object Found\")\n            drivetrain.turn(RIGHT)\n        wait(0.3, SECONDS)\n        wait(5, MSEC)\n\n# system event handlers\ntrackRings(onevent_trackRings_0)\n# add 15ms delay to make sure events are registered correctly.\nwait(15, MSEC)\n\nwhen_started1()\n","textLanguage":"python","robotConfig":[{"port":[8],"name":"motor_8","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"motor_8","xBDir":"false","drive":"arcadel","id":"primary"},"triportSourcePort":22},{"port":[9,10,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio36_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[6],"name":"motor_6","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[4,5],"name":"motor_group_4","customName":false,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio36_1","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[11],"name":"vision_11","customName":false,"deviceType":"Vision","deviceClass":"vision","setting":{"config":"{\"config\":{\"brightness\":20,\"signatures\":[{\"name\":\"STAKE\",\"parameters\":{\"uMin\":-1639,\"uMax\":-1093,\"uMean\":-1366,\"vMin\":-5395,\"vMax\":-4809,\"vMean\":-5102,\"rgb\":5989950,\"type\":0,\"name\":\"STAKE\"},\"range\":3.5},{\"name\":\"SIG_2\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_2\"},\"range\":2.5},{\"name\":\"SIG_3\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_3\"},\"range\":2.5},{\"name\":\"SIG_4\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_4\"},\"range\":2.5},{\"name\":\"SIG_5\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_5\"},\"range\":2.5},{\"name\":\"SIG_6\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_6\"},\"range\":2.5},{\"name\":\"SIG_7\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_7\"},\"range\":2.5}],\"codes\":[]}}","isConfigured":"false"},"triportSourcePort":22},{"port":[12],"name":"ai_vision_12","customName":false,"deviceType":"AIVision","deviceClass":"aivision","setting":{"config":"{\"colors\":[],\"codes\":[],\"tags\":false,\"AIObjects\":true,\"AIObjectModel\":[\"Ball(Blue)\",\"Ball(Green)\",\"Ball(Red)\",\"Ring(Blue)\",\"Ring(Green)\",\"Ring(Red)\",\"Cube(Blue)\",\"Cube(Green)\",\"Cube(Red)\"],\"AIModelMetadata\":{\"id\":0,\"version\":1,\"name\":\"Classroom Objects\"},\"aiModelDropDownValue\":\"2024-2025 High Stakes\"}","isConfigured":"false"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.3","minVersion":"3.1.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}