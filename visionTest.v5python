{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\n# vex-vision-config:begin\nvision_5__BLUEBOX = Signature(1, -3981, -3239, -3610,951, 5863, 3407,2.5, 0)\nvision_5__REDBOX = Signature(2, 5221, 8251, 6736,-1417, -843, -1130,2.5, 0)\nvision_5__GREENBOX = Signature(3, -617, 1, -308,-4605, -2437, -3521,2.5, 0)\nvision_5 = Vision(Ports.PORT5, 50, vision_5__BLUEBOX, vision_5__REDBOX, vision_5__GREENBOX)\n# vex-vision-config:end\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\n\n# ----------------------------------------------------------------------------\n# \n#    Project:        Detecting Objects (Vision)\n#    Description:    This project will detect 3 different colored objects\n#                    and display when each object is found on the V5\n#                    Brain's screen.\n#    Configuration:  Vision5 on Port 5\n# \n# ----------------------------------------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n\ncheck_red = Event()\ncheck_blue = Event()\ncheck_green = Event()\n\n# Will check to see if there is a blue object in view of the vision\n# sensor and display the result on line 1 on the V5 Brain's screen\ndef has_blue_callback():\n    brain.screen.clear_row(1)\n    brain.screen.set_cursor(1, 1)\n    vexcode_vision_5_objects = vision_5.take_snapshot(vision_5__BLUEBOX)\n    if vexcode_vision_5_objects and len(vexcode_vision_5_objects) > 0:\n        brain.screen.print(\"Blue Object Found\")\n    else:\n        brain.screen.print(\"No Blue Object\")\n\n# Will check to see if there is a red object in view of the vision\n# sensor and display the result on line 3 on the V5 Brain's screen\ndef has_red_callback():\n    brain.screen.clear_row(3)\n    brain.screen.set_cursor(3, 1)\n    vexcode_vision_5_objects = vision_5.take_snapshot(vision_5__REDBOX)\n    if vexcode_vision_5_objects and len(vexcode_vision_5_objects) > 0:\n        brain.screen.print(\"Red Object Found\")\n    else:\n        brain.screen.print(\"No Red Object\")\n\n# Will check to see if there is a green object in view of the vision\n# sensor and display the result on line 5 on the V5 Brain's screen\ndef has_green_callback():\n    brain.screen.clear_row(5)\n    brain.screen.set_cursor(5, 1)\n    vexcode_vision_5_objects = vision_5.take_snapshot(vision_5__GREENBOX)\n    if vexcode_vision_5_objects and len(vexcode_vision_5_objects) > 0:\n        brain.screen.print(\"Green Object Found\")\n    else:\n        brain.screen.print(\"No Green Object\")\n\n# register event handlers\ncheck_blue(has_blue_callback)\ncheck_red(has_red_callback)\ncheck_green(has_green_callback)\n\n# small delay to ensure that the event handlers are ready to be used\nwait(15, MSEC)\n\n# set the print font for all future prints to the V5 screen\nbrain.screen.set_font(FontType.MONO40)\n\n# constantly runs to check for new sensor data\nwhile True:\n    check_blue.broadcast_and_wait()\n    check_red.broadcast_and_wait()\n    check_green.broadcast_and_wait()\n    wait(0.1, SECONDS)\n","textLanguage":"python","robotConfig":[{"port":[5],"name":"vision_5","customName":false,"deviceType":"Vision","deviceClass":"vision","setting":{"config":"{\"config\":{\"brightness\":50,\"signatures\":[{\"name\":\"BLUEBOX\",\"parameters\":{\"uMin\":-3981,\"uMax\":-3239,\"uMean\":-3610,\"vMin\":951,\"vMax\":5863,\"vMean\":3407,\"rgb\":7778270,\"type\":0,\"name\":\"BLUEBOX\"},\"range\":2.5},{\"name\":\"REDBOX\",\"parameters\":{\"uMin\":5221,\"uMax\":8251,\"uMean\":6736,\"vMin\":-1417,\"vMax\":-843,\"vMean\":-1130,\"rgb\":14057072,\"type\":0,\"name\":\"REDBOX\"},\"range\":2.5},{\"name\":\"GREENBOX\",\"parameters\":{\"uMin\":-617,\"uMax\":1,\"uMean\":-308,\"vMin\":-4605,\"vMax\":-2437,\"vMean\":-3521,\"rgb\":13883554,\"type\":0,\"name\":\"GREENBOX\"},\"range\":2.5},{\"name\":\"SIG_4\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_4\"},\"range\":2.5},{\"name\":\"SIG_5\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_5\"},\"range\":2.5},{\"name\":\"SIG_6\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_6\"},\"range\":2.5},{\"name\":\"SIG_7\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_7\"},\"range\":2.5}],\"codes\":[]}}","isConfigured":"false"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.3","minVersion":"3.1.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}