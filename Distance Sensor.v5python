{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\n# AI Classification Competition Element IDs\nclass GameElements:\n    MOBILE_GOAL = 0\n    RED_RING = 1\n    BLUE_RING = 2\ncontroller_1 = Controller(PRIMARY)\nleft_motor_a = Motor(Ports.PORT3, GearSetting.RATIO_18_1, True)\nleft_motor_b = Motor(Ports.PORT5, GearSetting.RATIO_18_1, True)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT12, GearSetting.RATIO_18_1, False)\nright_motor_b = Motor(Ports.PORT11, GearSetting.RATIO_18_1, False)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain_inertial = Inertial(Ports.PORT10)\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, drivetrain_inertial, 319.19, 320, 40, MM, 1)\n# AI Vision Color Descriptions\n# AI Vision Code Descriptions\nai_vision_20 = AiVision(Ports.PORT20, AiVision.ALL_AIOBJS)\ndistance_19 = Distance(Ports.PORT19)\nmotor_16 = Motor(Ports.PORT16, GearSetting.RATIO_18_1, False)\nmotor_18 = Motor(Ports.PORT18, GearSetting.RATIO_18_1, False)\ndigital_out_a = DigitalOut(brain.three_wire_port.a)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\nvexcode_initial_drivetrain_calibration_completed = False\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    global vexcode_initial_drivetrain_calibration_completed\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    drivetrain_inertial.calibrate()\n    while drivetrain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    vexcode_initial_drivetrain_calibration_completed = True\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n\n# Calibrate the Drivetrain\ncalibrate_drivetrain()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\nvexcode_ai_vision_20_objects = []\nvexcode_ai_vision_20_object_index = 0\nvexcode_brain_precision = 0\nvexcode_console_precision = 0\nvexcode_controller_1_precision = 0\nmessage1 = Event()\ncheckPeg = Event()\ntrackRings = Event()\nreverseBelt = Event()\ncheckJam = Event()\nringCount = Event()\nfindCorner = Event()\ncornerTracking = Event()\nmyVariable = 0\ncount = 0\ninertialSeek = 0\nffffffffff = False\n\ndef when_started1():\n    global message1, checkPeg, trackRings, reverseBelt, checkJam, ringCount, findCorner, cornerTracking, myVariable, count, inertialSeek, ffffffffff, vexcode_ai_vision_20_objects, vexcode_ai_vision_20_object_index, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    drivetrain.set_heading(0, DEGREES)\n    digital_out_a.set(True)\n    count = 0\n    brain.screen.set_cursor(1, 1)\n    brain.screen.set_font(FontType.MONO20)\n    drivetrain.set_drive_velocity(100, PERCENT)\n    drivetrain.set_turn_velocity(80, PERCENT)\n    while not ffffffffff:\n        if count == 0:\n            drivetrain.drive_for(REVERSE, 90, INCHES)\n            drivetrain.stop()\n            digital_out_a.set(False)\n            wait(2, SECONDS)\n            drivetrain.drive_for(FORWARD, 50, INCHES)\n            drivetrain.stop()\n            wait(2, SECONDS)\n            drivetrain.turn_for(RIGHT, 125, DEGREES)\n            drivetrain.drive_for(FORWARD, 47, INCHES)\n            drivetrain.stop()\n            drivetrain.drive_for(FORWARD, 30, INCHES)\n            drivetrain.stop()\n            drivetrain.turn_for(RIGHT, 49, DEGREES)\n            wait(2, SECONDS)\n            drivetrain.drive_for(FORWARD, 18, INCHES)\n            drivetrain.stop()\n            wait(2, SECONDS)\n            drivetrain.drive_for(REVERSE, 10, INCHES)\n            drivetrain.turn_for(RIGHT, 26, DEGREES)\n            drivetrain.stop()\n            wait(2, SECONDS)\n            drivetrain.drive_for(FORWARD, 23, INCHES)\n            drivetrain.stop()\n            wait(2, SECONDS)\n            drivetrain.drive_for(REVERSE, 10, INCHES)\n            drivetrain.stop()\n            wait(2, SECONDS)\n            drivetrain.turn_for(RIGHT, 91, DEGREES)\n            drivetrain.drive_for(FORWARD, 130, INCHES)\n            drivetrain.stop()\n            wait(2, SECONDS)\n            drivetrain.turn_for(LEFT, 71, DEGREES)\n            drivetrain.drive_for(FORWARD, 90, INCHES)\n            drivetrain.stop()\n        wait(5, MSEC)\n    wait(2, SECONDS)\n    drivetrain.turn_to_heading(130, DEGREES)\n    drivetrain.drive_for(REVERSE, 70, INCHES)\n    drivetrain.stop()\n    digital_out_a.set(True)\n    wait(2, SECONDS)\n    drivetrain.drive_for(FORWARD, 15, INCHES)\n\ndef onevent_trackRings_0():\n    global message1, checkPeg, trackRings, reverseBelt, checkJam, ringCount, findCorner, cornerTracking, myVariable, count, inertialSeek, ffffffffff, vexcode_ai_vision_20_objects, vexcode_ai_vision_20_object_index, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    while True:\n        vexcode_ai_vision_20_objects = ai_vision_20.take_snapshot(AiVision.ALL_AIOBJS)\n        if vexcode_ai_vision_20_objects and len(vexcode_ai_vision_20_objects) > 0 and vexcode_ai_vision_20_objects[vexcode_ai_vision_20_object_index].id == GameElements.RED_RING:\n            if vexcode_ai_vision_20_objects[vexcode_ai_vision_20_object_index].centerX > 100:\n                drivetrain.turn_for(RIGHT, 1, DEGREES)\n            if vexcode_ai_vision_20_objects[vexcode_ai_vision_20_object_index].centerX < 60:\n                drivetrain.turn_for(LEFT, 1, DEGREES)\n            if vexcode_ai_vision_20_objects[vexcode_ai_vision_20_object_index].centerX > 100 and vexcode_ai_vision_20_objects[vexcode_ai_vision_20_object_index].centerX < 100:\n                if vexcode_ai_vision_20_objects[vexcode_ai_vision_20_object_index].width < 125:\n                    drivetrain.drive(FORWARD)\n                    drivetrain.stop()\n        else:\n            drivetrain.set_turn_velocity(25, PERCENT)\n            drivetrain.turn(RIGHT)\n        wait(5, MSEC)\n\ndef when_started2():\n    global message1, checkPeg, trackRings, reverseBelt, checkJam, ringCount, findCorner, cornerTracking, myVariable, count, inertialSeek, ffffffffff, vexcode_ai_vision_20_objects, vexcode_ai_vision_20_object_index, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    ffffffffff = False\n    while True:\n        if distance_19.object_distance(INCHES) < 2:\n            count = count + 1\n            brain.screen.print(count, precision=6 if vexcode_brain_precision is None else vexcode_brain_precision)\n            wait(2, SECONDS)\n        if count == 4:\n            ffffffffff = True\n        wait(5, MSEC)\n\ndef when_started3():\n    global message1, checkPeg, trackRings, reverseBelt, checkJam, ringCount, findCorner, cornerTracking, myVariable, count, inertialSeek, ffffffffff, vexcode_ai_vision_20_objects, vexcode_ai_vision_20_object_index, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    motor_18.set_velocity(100, PERCENT)\n    motor_16.set_velocity(100, PERCENT)\n    motor_18.spin(FORWARD)\n    motor_16.spin(FORWARD)\n    wait(7, SECONDS)\n    while True:\n        if motor_18.velocity(PERCENT) < 65:\n            motor_18.spin(REVERSE)\n            wait(2, SECONDS)\n            motor_18.stop()\n            wait(1, SECONDS)\n            motor_18.spin(FORWARD)\n            wait(2, SECONDS)\n            break\n        wait(5, MSEC)\n\n# system event handlers\ntrackRings(onevent_trackRings_0)\n# add 15ms delay to make sure events are registered correctly.\nwait(15, MSEC)\n\nws2 = Thread( when_started2 )\nws3 = Thread( when_started3 )\nwhen_started1()\n","textLanguage":"python","robotConfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[3,5,12,11,10],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"rev","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[20],"name":"ai_vision_20","customName":false,"deviceType":"AIVision","deviceClass":"aivision","setting":{"config":"{\"colors\":[],\"codes\":[],\"tags\":false,\"AIObjects\":true,\"AIObjectModel\":[\"Ball(Blue)\",\"Ball(Green)\",\"Ball(Red)\",\"Ring(Blue)\",\"Ring(Green)\",\"Ring(Red)\",\"Cube(Blue)\",\"Cube(Green)\",\"Cube(Red)\"],\"aiModelDropDownValue\":\"2024-2025 High Stakes\"}","isConfigured":"false"},"triportSourcePort":22},{"port":[19],"name":"distance_19","customName":false,"deviceType":"Distance","deviceClass":"distance","setting":{"id":"partner"},"triportSourcePort":22},{"port":[16],"name":"motor_16","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[18],"name":"motor_18","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[1],"name":"digital_out_a","customName":false,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.3","minVersion":"3.1.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}